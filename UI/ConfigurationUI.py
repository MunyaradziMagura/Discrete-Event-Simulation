# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ConfigurationUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import csv
import sys

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import QDir
from PyQt5.QtWidgets import QMessageBox, QFileDialog, QApplication, QMainWindow
from PyQt5 import QtGui

import Configuration_parameter


class Ui_Configuration_MainWindow(object):
    def __init__(self):
        self.message_Button = None
        self.parameter = Configuration_parameter.Configuration_parameter()  # Create a new class for storing configuration data here.

    def setupUi(self, Configuration_MainWindow):
        Configuration_MainWindow.setObjectName("Configuration_MainWindow")
        # Lock the window size. To avoid distorting changes in the control style, lock the window size.
        Configuration_MainWindow.resize(550, 400)
        Configuration_MainWindow.setMinimumSize(QtCore.QSize(550, 400))
        Configuration_MainWindow.setMaximumSize(QtCore.QSize(550, 400))
        Configuration_MainWindow.setStyleSheet("background-color:rgb(57, 57, 57);\n"
                                               "")
        self.centralwidget = QtWidgets.QWidget(Configuration_MainWindow)
        # Set a specific style for the control through setStyleSheet. The function can also be realized in QT designer.
        self.centralwidget.setStyleSheet("QPushButton {\n"
                                         "    background-color: #555555;\n"
                                         "    border-radius: 8px;\n"
                                         "    padding: 16px 32px;\n"
                                         "    text-align: center;\n"
                                         "    text-decoration: none;\n"
                                         "    font-size: 16px;\n"
                                         "    margin: 4px 2px;\n"
                                         "    color: white;\n"
                                         "}\n"
                                         "\n"
                                         "QPushButton:hover {\n"
                                         "    background-color: black;\n"
                                         "    border: 2px solid #555555;\n"
                                         "    color: white\n"
                                         "}\n"
                                         "\n"
                                         "QPushButton:pressed {\n"
                                         "    background-color: black;\n"
                                         "}\n"
                                         "\n"
                                         "QComboBox {\n"
                                         "            color:#95949D;\n"
                                         "            background:black;\n"
                                         "        }\n"
                                         "\n"
                                         "QLineEdit{\n"
                                         "        color: white\n"
                                         "}")
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setMinimumSize(QtCore.QSize(0, 0))
        self.tabWidget.setMaximumSize(QtCore.QSize(1111111, 1111111))
        self.tabWidget.setStyleSheet("QTabWidget::pane{\n"
                                     "    border:none;\n"
                                     "}\n"
                                     "\n"
                                     "\n"
                                     "QTabBar::tab{\n"
                                     "    background:#555555;\n"
                                     "    color:white;\n"
                                     "    min-width:18ex;\n"
                                     "    min-height:5ex;\n"
                                     "}\n"
                                     "\n"
                                     "QTabBar::tab:hover{\n"
                                     "    background:black;\n"
                                     "}\n"
                                     "QTabBar::tab:selected{\n"
                                     "    border-color: white;\n"
                                     "    background:black;\n"
                                     "    color:white;\n"
                                     "}\n"
                                     "\n"
                                     "QLabel{\n"
                                     "color: white;\n"
                                     "}\n"
                                     "\n"
                                     "QGroupBox{\n"
                                     "   color: white\n"
                                     "}")
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.verticalLayout_19 = QtWidgets.QVBoxLayout(self.tab)
        self.verticalLayout_19.setObjectName("verticalLayout_19")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_15 = QtWidgets.QVBoxLayout()
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_15.addItem(spacerItem)
        self.horizontalLayout_23 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_23.setObjectName("horizontalLayout_23")
        self.label_25 = QtWidgets.QLabel(self.tab)
        self.label_25.setObjectName("label_25")
        self.horizontalLayout_23.addWidget(self.label_25)
        self.lineEdit_start_temp = QtWidgets.QLineEdit(self.tab)
        self.lineEdit_start_temp.setObjectName("lineEdit_start_temp")
        self.lineEdit_start_temp.setValidator(QtGui.QDoubleValidator()) # Limit input type. Avoid illegal input.
        self.horizontalLayout_23.addWidget(self.lineEdit_start_temp)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_23.addItem(spacerItem1)
        self.verticalLayout_15.addLayout(self.horizontalLayout_23)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_15.addItem(spacerItem2)
        self.horizontalLayout_24 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_24.setObjectName("horizontalLayout_24")
        self.label_start_vibra = QtWidgets.QLabel(self.tab)
        self.label_start_vibra.setObjectName("label_start_vibra")
        self.horizontalLayout_24.addWidget(self.label_start_vibra)
        self.lineEdit_start_vib = QtWidgets.QLineEdit(self.tab)
        self.lineEdit_start_vib.setObjectName("lineEdit_start_vib")
        self.lineEdit_start_vib.setValidator(QtGui.QDoubleValidator())
        self.horizontalLayout_24.addWidget(self.lineEdit_start_vib)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_24.addItem(spacerItem3)
        self.verticalLayout_15.addLayout(self.horizontalLayout_24)
        spacerItem4 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_15.addItem(spacerItem4)
        self.verticalLayout_15.setStretch(0, 1)
        self.verticalLayout_15.setStretch(1, 3)
        self.verticalLayout_15.setStretch(2, 1)
        self.verticalLayout_15.setStretch(3, 3)
        self.verticalLayout_15.setStretch(4, 3)
        self.horizontalLayout_2.addLayout(self.verticalLayout_15)
        self.verticalLayout_14 = QtWidgets.QVBoxLayout()
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_14.addItem(spacerItem5)
        self.horizontalLayout_21 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_21.setObjectName("horizontalLayout_21")
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_21.addItem(spacerItem6)
        self.label_29 = QtWidgets.QLabel(self.tab)
        self.label_29.setObjectName("label_29")
        self.horizontalLayout_21.addWidget(self.label_29)
        self.lineEdit_limit_temp = QtWidgets.QLineEdit(self.tab)
        self.lineEdit_limit_temp.setObjectName("lineEdit_limit_temp")
        self.lineEdit_limit_temp.setValidator(QtGui.QDoubleValidator())
        self.horizontalLayout_21.addWidget(self.lineEdit_limit_temp)
        self.verticalLayout_14.addLayout(self.horizontalLayout_21)
        spacerItem7 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_14.addItem(spacerItem7)
        self.horizontalLayout_22 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_22.setObjectName("horizontalLayout_22")
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_22.addItem(spacerItem8)
        self.label_ = QtWidgets.QLabel(self.tab)
        self.label_.setObjectName("label_")
        self.horizontalLayout_22.addWidget(self.label_)
        self.lineEdit_limit_vib = QtWidgets.QLineEdit(self.tab)
        self.lineEdit_limit_vib.setObjectName("lineEdit_limit_vib")
        self.lineEdit_limit_vib.setValidator(QtGui.QDoubleValidator())
        self.horizontalLayout_22.addWidget(self.lineEdit_limit_vib)
        self.verticalLayout_14.addLayout(self.horizontalLayout_22)
        spacerItem9 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_14.addItem(spacerItem9)
        self.verticalLayout_14.setStretch(0, 1)
        self.verticalLayout_14.setStretch(1, 3)
        self.verticalLayout_14.setStretch(2, 1)
        self.verticalLayout_14.setStretch(3, 3)
        self.verticalLayout_14.setStretch(4, 3)
        self.horizontalLayout_2.addLayout(self.verticalLayout_14)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        spacerItem10 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem10)
        self.horizontalLayout_25 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_25.setObjectName("horizontalLayout_25")
        self.label_33 = QtWidgets.QLabel(self.tab)
        self.label_33.setObjectName("label_33")
        self.horizontalLayout_25.addWidget(self.label_33)
        self.lineEdit_interval_time = QtWidgets.QLineEdit(self.tab)
        self.lineEdit_interval_time.setObjectName("lineEdit_interval_time")
        self.lineEdit_interval_time.setValidator(QtGui.QDoubleValidator())
        self.horizontalLayout_25.addWidget(self.lineEdit_interval_time)
        spacerItem11 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_25.addItem(spacerItem11)
        self.verticalLayout_2.addLayout(self.horizontalLayout_25)
        spacerItem12 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem12)
        self.verticalLayout_2.setStretch(0, 6)
        self.verticalLayout_2.setStretch(2, 2)
        self.verticalLayout_19.addLayout(self.verticalLayout_2)
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.tab_2)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.groupBox_3 = QtWidgets.QGroupBox(self.tab_2)
        self.groupBox_3.setStyleSheet("QGroupBox{\n"
                                      "   color: white\n"
                                      "}")
        self.groupBox_3.setObjectName("groupBox_3")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.groupBox_3)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        spacerItem13 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem13)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_2 = QtWidgets.QLabel(self.groupBox_3)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_7.addWidget(self.label_2)
        self.lineEdit_temp_warning = QtWidgets.QLineEdit(self.groupBox_3)
        self.lineEdit_temp_warning.setObjectName("lineEdit_temp_warning")
        self.lineEdit_temp_warning.setValidator(QtGui.QDoubleValidator())
        self.horizontalLayout_7.addWidget(self.lineEdit_temp_warning)
        spacerItem14 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem14)
        self.verticalLayout_3.addLayout(self.horizontalLayout_7)
        spacerItem15 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem15)
        self.horizontalLayout_28 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_28.setObjectName("horizontalLayout_28")
        self.label_14 = QtWidgets.QLabel(self.groupBox_3)
        self.label_14.setObjectName("label_14")
        self.horizontalLayout_28.addWidget(self.label_14)
        self.lineEdit_temp_alarm = QtWidgets.QLineEdit(self.groupBox_3)
        self.lineEdit_temp_alarm.setObjectName("lineEdit_temp_alarm")
        self.lineEdit_temp_alarm.setValidator(QtGui.QDoubleValidator())
        self.horizontalLayout_28.addWidget(self.lineEdit_temp_alarm)
        spacerItem16 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_28.addItem(spacerItem16)
        self.verticalLayout_3.addLayout(self.horizontalLayout_28)
        spacerItem17 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem17)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label = QtWidgets.QLabel(self.groupBox_3)
        self.label.setObjectName("label")
        self.horizontalLayout_6.addWidget(self.label)
        self.lineEdit_temp_emergency = QtWidgets.QLineEdit(self.groupBox_3)
        self.lineEdit_temp_emergency.setObjectName("lineEdit_temp_emergency")
        self.lineEdit_temp_emergency.setValidator(QtGui.QDoubleValidator())
        self.horizontalLayout_6.addWidget(self.lineEdit_temp_emergency)
        spacerItem18 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem18)
        spacerItem19 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem19)
        self.verticalLayout_3.addLayout(self.horizontalLayout_6)
        spacerItem20 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem20)
        self.verticalLayout_3.setStretch(0, 1)
        self.verticalLayout_3.setStretch(1, 4)
        self.verticalLayout_3.setStretch(2, 1)
        self.verticalLayout_3.setStretch(3, 4)
        self.verticalLayout_3.setStretch(4, 1)
        self.verticalLayout_3.setStretch(5, 4)
        self.verticalLayout_3.setStretch(6, 1)
        self.verticalLayout_4.addLayout(self.verticalLayout_3)
        self.horizontalLayout_4.addWidget(self.groupBox_3)
        self.groupBox_4 = QtWidgets.QGroupBox(self.tab_2)
        self.groupBox_4.setObjectName("groupBox_4")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.groupBox_4)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        spacerItem21 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_5.addItem(spacerItem21)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.label_13 = QtWidgets.QLabel(self.groupBox_4)
        self.label_13.setObjectName("label_13")
        self.horizontalLayout_8.addWidget(self.label_13)
        self.lineEdit_vib_warning = QtWidgets.QLineEdit(self.groupBox_4)
        self.lineEdit_vib_warning.setObjectName("lineEdit_vib_warning")
        self.lineEdit_vib_warning.setValidator(QtGui.QDoubleValidator())
        self.horizontalLayout_8.addWidget(self.lineEdit_vib_warning)
        spacerItem22 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_8.addItem(spacerItem22)
        self.verticalLayout_5.addLayout(self.horizontalLayout_8)
        spacerItem23 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_5.addItem(spacerItem23)
        self.horizontalLayout_29 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_29.setObjectName("horizontalLayout_29")
        self.label_15 = QtWidgets.QLabel(self.groupBox_4)
        self.label_15.setObjectName("label_15")
        self.horizontalLayout_29.addWidget(self.label_15)
        self.lineEdit_vib_alarm = QtWidgets.QLineEdit(self.groupBox_4)
        self.lineEdit_vib_alarm.setObjectName("lineEdit_vib_alarm")
        self.lineEdit_vib_alarm.setValidator(QtGui.QDoubleValidator())
        self.horizontalLayout_29.addWidget(self.lineEdit_vib_alarm)
        spacerItem24 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_29.addItem(spacerItem24)
        self.verticalLayout_5.addLayout(self.horizontalLayout_29)
        spacerItem25 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_5.addItem(spacerItem25)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.label_16 = QtWidgets.QLabel(self.groupBox_4)
        self.label_16.setObjectName("label_16")
        self.horizontalLayout_9.addWidget(self.label_16)
        self.lineEdit_vib_emergency = QtWidgets.QLineEdit(self.groupBox_4)
        self.lineEdit_vib_emergency.setObjectName("lineEdit_vib_emergency")
        self.lineEdit_vib_emergency.setValidator(QtGui.QDoubleValidator())
        self.horizontalLayout_9.addWidget(self.lineEdit_vib_emergency)
        spacerItem26 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_9.addItem(spacerItem26)
        spacerItem27 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_9.addItem(spacerItem27)
        self.verticalLayout_5.addLayout(self.horizontalLayout_9)
        spacerItem28 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_5.addItem(spacerItem28)
        self.verticalLayout_5.setStretch(0, 1)
        self.verticalLayout_5.setStretch(1, 4)
        self.verticalLayout_5.setStretch(2, 1)
        self.verticalLayout_5.setStretch(3, 4)
        self.verticalLayout_5.setStretch(4, 1)
        self.verticalLayout_5.setStretch(5, 4)
        self.verticalLayout_5.setStretch(6, 1)
        self.verticalLayout_6.addLayout(self.verticalLayout_5)
        self.horizontalLayout_4.addWidget(self.groupBox_4)
        self.horizontalLayout_5.addLayout(self.horizontalLayout_4)
        self.tabWidget.addTab(self.tab_2, "")
        self.horizontalLayout.addWidget(self.tabWidget)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setStyleSheet("QGroupBox{\n"
                                    "   color: white\n"
                                    "}")
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout_18 = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.verticalLayout_17 = QtWidgets.QVBoxLayout()
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.new_Button = QtWidgets.QPushButton(self.groupBox)
        self.new_Button.setStyleSheet(
            "setStyleSheet (\"venus--TitleBar {background-color: rgb(0,0,0);color: rgb(255,255,255);}\");")
        self.new_Button.setObjectName("new_Button")
        self.new_Button.clicked.connect(
            self.button_clicked_new)  # Use "connect" to send the action trigger signal to the specified function.
        self.verticalLayout_17.addWidget(self.new_Button)
        self.save_Button = QtWidgets.QPushButton(self.groupBox)
        self.save_Button.setObjectName("save_Button")
        self.verticalLayout_17.addWidget(self.save_Button)
        self.save_Button.clicked.connect(self.button_clicked_save)
        self.open_Button = QtWidgets.QPushButton(self.groupBox)
        self.open_Button.setObjectName("open_Button")
        self.verticalLayout_17.addWidget(self.open_Button)
        self.open_Button.clicked.connect(self.button_clicked_open)
        self.verticalLayout_18.addLayout(self.verticalLayout_17)
        self.verticalLayout.addWidget(self.groupBox)
        self.start_Button = QtWidgets.QPushButton(self.centralwidget)
        self.start_Button.setObjectName("start_Button")
        self.verticalLayout.addWidget(self.start_Button)
        self.start_Button.clicked.connect(self.button_clicked_start)
        self.end_Button = QtWidgets.QPushButton(self.centralwidget)
        self.end_Button.setObjectName("end_Button")
        self.end_Button.clicked.connect(self.button_clicked_end)
        self.verticalLayout.addWidget(self.end_Button)
        self.horizontalLayout.addLayout(self.verticalLayout)
        self.horizontalLayout.setStretch(0, 11)
        self.horizontalLayout.setStretch(1, 4)
        Configuration_MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Configuration_MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 550, 22))
        self.menubar.setObjectName("menubar")
        Configuration_MainWindow.setMenuBar(self.menubar)

        self.retranslateUi(Configuration_MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Configuration_MainWindow)

    def retranslateUi(self, Configuration_MainWindow):
        _translate = QtCore.QCoreApplication.translate
        Configuration_MainWindow.setWindowTitle(_translate("Configuration_MainWindow", "MainWindow"))
        self.label_25.setText(_translate("Configuration_MainWindow", "Start Temperature"))
        self.lineEdit_start_temp.setText(_translate("Configuration_MainWindow", "0"))
        self.label_start_vibra.setText(_translate("Configuration_MainWindow", "Start Vibration"))
        self.lineEdit_start_vib.setText(_translate("Configuration_MainWindow", "0"))
        self.label_29.setText(_translate("Configuration_MainWindow", "Limit Temperature"))
        self.lineEdit_limit_temp.setText(_translate("Configuration_MainWindow", "0"))
        self.label_.setText(_translate("Configuration_MainWindow", "Limit Vibration"))
        self.lineEdit_limit_vib.setText(_translate("Configuration_MainWindow", "0"))
        self.label_33.setText(_translate("Configuration_MainWindow", "Test Time"))
        self.lineEdit_interval_time.setText(_translate("Configuration_MainWindow", "0"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("Configuration_MainWindow", "Basic"))
        self.groupBox_3.setTitle(_translate("Configuration_MainWindow", "Temperature"))
        self.label_2.setText(_translate("Configuration_MainWindow", "Warning"))
        self.lineEdit_temp_warning.setText(_translate("Configuration_MainWindow", "0"))
        self.label_14.setText(_translate("Configuration_MainWindow", "Alert"))
        self.lineEdit_temp_alarm.setText(_translate("Configuration_MainWindow", "0"))
        self.label.setText(_translate("Configuration_MainWindow", "Emergency"))
        self.lineEdit_temp_emergency.setText(_translate("Configuration_MainWindow", "0"))
        self.groupBox_4.setTitle(_translate("Configuration_MainWindow", "Vibration"))
        self.label_13.setText(_translate("Configuration_MainWindow", "Warning"))
        self.lineEdit_vib_warning.setText(_translate("Configuration_MainWindow", "0"))
        self.label_15.setText(_translate("Configuration_MainWindow", "Alert"))
        self.lineEdit_vib_alarm.setText(_translate("Configuration_MainWindow", "0"))
        self.label_16.setText(_translate("Configuration_MainWindow", "Emergency"))
        self.lineEdit_vib_emergency.setText(_translate("Configuration_MainWindow", "0"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("Configuration_MainWindow", "Sensor"))
        self.groupBox.setTitle(_translate("Configuration_MainWindow", "File"))
        self.new_Button.setText(_translate("Configuration_MainWindow", "NEW"))
        self.save_Button.setText(_translate("Configuration_MainWindow", "SAVE"))
        self.open_Button.setText(_translate("Configuration_MainWindow", "OPEN"))
        self.start_Button.setText(_translate("Configuration_MainWindow", "Start"))
        self.end_Button.setText(_translate("Configuration_MainWindow", "END"))

    # The following is the self-invoking method in the window.
    def msg_non_empty_check(self):
        # This information box is used to remind users of illegal input.
        QMessageBox.information(self.message_Button, "Warning", "Please enter the parameters correctly!")

    def msg_new(self):
        # This information box is used to remind the user that the current configuration information will be reset.
        a = QMessageBox().question(None, "Warning", "The current progress will not be saved. Do you want to continue?",
                                   QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if a == QMessageBox.Yes:
            self.reset()
        if a == QMessageBox.No:
            pass

    def check_basic(self):
        # This method checks whether the information in the "basic" tag is empty.The return value is Boolean.
        if not self.lineEdit_start_temp.text() or not self.lineEdit_start_vib.text() or not self.lineEdit_limit_temp.text() or not self.lineEdit_limit_vib.text() or not self.lineEdit_interval_time.text():
            self.msg_non_empty_check()
            return False
        else:
            return True

    def set_data(self):
        # This method sets the data into the configuration parameter class.
        self.parameter.set_start_temperature(float(self.lineEdit_start_temp.text()))
        self.parameter.set_limit_temperature(float(self.lineEdit_limit_temp.text()))
        self.parameter.set_start_vibration(float(self.lineEdit_start_vib.text()))
        self.parameter.set_limit_vibration(float(self.lineEdit_limit_vib.text()))
        self.parameter.set_sensor_interval_time(float(self.lineEdit_interval_time.text()))
        self.parameter.set_temp_sensor_warning(float(self.lineEdit_temp_warning.text()))
        self.parameter.set_temp_sensor_alarm(float(self.lineEdit_temp_alarm.text()))
        self.parameter.set_temp_sensor_emergency(float(self.lineEdit_vib_emergency.text()))
        self.parameter.set_vib_sensor_warning(float(self.lineEdit_vib_warning.text()))
        self.parameter.set_vib_sensor_alarm(float(self.lineEdit_vib_alarm.text()))
        self.parameter.set_vib_sensor_emergency(float(self.lineEdit_vib_emergency.text()))

    def check_sensor(self):
        # This method is used to detect whether the value in the "Sensor" class is empty. The return value is Boolean.
        if self.lineEdit_temp_warning.text().strip() == "":
            self.msg_non_empty_check()
            return False
        if self.lineEdit_temp_alarm.text().strip() == "":
            self.msg_non_empty_check()
            return False
        if self.lineEdit_temp_emergency.text().strip() == "":
            self.msg_non_empty_check()
            return False
        if self.lineEdit_vib_warning.text().strip() == "":
            self.msg_non_empty_check()
            return False
        if self.lineEdit_vib_alarm.text().strip() == "":
            self.msg_non_empty_check()
            return False
        if self.lineEdit_vib_emergency.text().strip() == "":
            self.msg_non_empty_check()
            return False
        else:
            return True

    # The following method is used to enable the input permission of the input box.
    def edit_close(self):
        self.lineEdit_start_temp.setEnabled(False)
        self.lineEdit_start_vib.setEnabled(False)
        self.lineEdit_limit_temp.setEnabled(False)
        self.lineEdit_limit_vib.setEnabled(False)
        self.lineEdit_interval_time.setEnabled(False)
        self.lineEdit_temp_warning.setEnabled(False)
        self.lineEdit_temp_alarm.setEnabled(False)
        self.lineEdit_temp_emergency.setEnabled(False)
        self.lineEdit_vib_warning.setEnabled(False)
        self.lineEdit_vib_alarm.setEnabled(False)
        self.lineEdit_vib_emergency.setEnabled(False)

    def edit_available(self):
        self.lineEdit_start_temp.setEnabled(True)
        self.lineEdit_start_vib.setEnabled(True)
        self.lineEdit_limit_temp.setEnabled(True)
        self.lineEdit_limit_vib.setEnabled(True)
        self.lineEdit_interval_time.setEnabled(True)
        self.lineEdit_temp_warning.setEnabled(True)
        self.lineEdit_temp_alarm.setEnabled(True)
        self.lineEdit_temp_emergency.setEnabled(True)
        self.lineEdit_vib_warning.setEnabled(True)
        self.lineEdit_vib_alarm.setEnabled(True)
        self.lineEdit_vib_emergency.setEnabled(True)

    # This method is used to reset the input box data. The reset value is 0.
    def reset(self):
        self.lineEdit_start_temp.setText("0")
        self.lineEdit_start_vib.setText("0")
        self.lineEdit_limit_temp.setText("0")
        self.lineEdit_limit_vib.setText("0")
        self.lineEdit_interval_time.setText("0")
        self.lineEdit_temp_warning.setText("0")
        self.lineEdit_temp_alarm.setText("0")
        self.lineEdit_temp_emergency.setText("0")
        self.lineEdit_vib_warning.setText("0")
        self.lineEdit_vib_alarm.setText("0")
        self.lineEdit_vib_emergency.setText("0")
        self.set_data()

    # The following are button events, please add code under the corresponding method.
    def button_clicked_start(self):
        if self.start_Button.text() == "Start":  # Judging the current state
            if self.check_sensor() == True and self.check_basic() == True:
                self.start_Button.setText("PAUSE")
                self.edit_close()
                # Please start the simulation here
            else:
                pass
        elif self.start_Button.text() == "PAUSE":
            self.start_Button.setText("Start")
            self.edit_available()
            # Please pause the simulation here

    def button_clicked_end(self):
        # Terminate the simulation.
        pass

    def button_clicked_new(self):
        # Open the information box asking if you need to refresh the configuration.
        self.msg_new()

    def button_clicked_save(self):
        if self.check_basic() == True and self.check_sensor() == True:
            self.save_file()
            self.set_data()
        else:
            pass

    def button_clicked_open(self):
        self.open_File()

    # The following methods are used to open and read the csv
    def open_File(self):
        try:
            # Use the QFileDialog method to obtain the local address of the csv file that the user clicks on through the window.
            file_path = QFileDialog.getOpenFileNames(None, "Please select the configuration file.", "", "*.csv")
            print(file_path[0][0])
            with open(file_path[0][0], "r", encoding="utf-8") as f:
                reader = csv.reader(f)
                rows = [row for row in reader]
                # Obtain simulation configuration data.
                temporary_row = rows[1]
                self.lineEdit_start_temp.setText(temporary_row[0])
                self.lineEdit_limit_temp.setText(temporary_row[1])
                self.lineEdit_start_vib.setText(temporary_row[2])
                self.lineEdit_limit_vib.setText(temporary_row[3])
                self.lineEdit_interval_time.setText(temporary_row[4])
                self.lineEdit_temp_warning.setText(temporary_row[5])
                self.lineEdit_temp_alarm.setText(temporary_row[6])
                self.lineEdit_temp_emergency.setText(temporary_row[7])
                self.lineEdit_vib_warning.setText(temporary_row[8])
                self.lineEdit_vib_alarm.setText(temporary_row[9])
                self.lineEdit_vib_emergency.setText(temporary_row[10])
                self.set_data()
        except:
            print("EXIT")

    # The following method is used to store configuration data, the format is csv
    def save_file(self):
        try:
            cur_path = QDir.currentPath()
            title = "Save Configuration File"
            filt = "csv File(*.csv)"
            # Open the save file window, the save type is limited to csv.
            file_name, flt = QFileDialog.getSaveFileName(None, title, cur_path, filt)
            if file_name == "":
                return
            with open(file_name, "w", newline="") as csvfile:
                writer = csv.writer(csvfile)
                writer.writerows(
                    [["Start temperature", "Limit temperature", "Start Vibration", "Limit Vibration", "Teat Time"
                         , "Sensor_temp_warning", "Sensor_temp_alart", "Sensor_temp_emergency", "Sensor_vib_warning "
                         , "Sensor_vib_alart", "Sensor_vib_emergency"],
                     [self.lineEdit_start_temp.text(), self.lineEdit_limit_temp.text(), self.lineEdit_start_vib.text(),
                      self.lineEdit_limit_vib.text(), self.lineEdit_interval_time.text(),
                      self.lineEdit_temp_warning.text(),
                      self.lineEdit_temp_alarm.text(), self.lineEdit_temp_emergency.text(),
                      self.lineEdit_vib_warning.text(),
                      self.lineEdit_vib_alarm.text(), self.lineEdit_vib_emergency.text()]])
        except:
            QMessageBox.critical(None, "ERROR", "Failed to save file")


if __name__ == '__main__':
    from PyQt5 import QtCore
    # Importance!Make sure that the window adapts to the screen resolution.↓
    QtCore.QCoreApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)
    app = QApplication(sys.argv)
    MainWindow = QMainWindow()
    ui = Ui_Configuration_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
